// ------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Версия среды выполнения: 15.0.0.0
//  
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторного создания кода.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Generator
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class Scenario : ScenarioBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"/* Copyright 2017-2018 REAL.NET group
 *
 * Licensed under the Apache License, Version 2.0 (the ""License"");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an ""AS IS"" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

");
            this.Write("namespace Generator\r\n{\r\n\tusing System;\r\n\tusing System.Linq;\r\n\tusing System.Reacti" +
                    "ve;\r\n\tusing System.Reactive.Linq;\r\n\tusing System.Reactive.Subjects;\r\n\tusing Robo" +
                    "tSimulation;\r\n\tusing Trik;\r\n\r\n\tpublic class GeneratedCode\r\n    {\r\n");
            
            #line 32 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"

List<Repo.INode> modelNodes = new List<Repo.INode>();
foreach (var x in r.Model("GreenhouseTestModel").Nodes) {
	modelNodes.Add(x);
}
	
foreach (var x in modelNodes) { 
            
            #line default
            #line hidden
            this.Write("\t\tprivate static ");
            
            #line 39 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classOfElement(x.Name)));
            
            #line default
            #line hidden
            this.Write(" element");
            
            #line 39 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelNodes.IndexOf(x)));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 40 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\tprivate static void Main(string[] args)\r\n\t\t{\r\n");
            
            #line 44 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
 
foreach (var x in modelNodes) { 
	var index = modelNodes.IndexOf(x); 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\telement");
            
            #line 48 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write(" = new ");
            
            #line 48 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(classOfElement(x.Name)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 48 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write(");\r\n\t");
            
            #line 49 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
 
	if (classOfElement(x.Name) == "Interval")
	{
			var minEnum = x.Attributes.Where(y => y.Name == "min").AsEnumerable();
			var maxEnum = x.Attributes.Where(y => y.Name == "max").AsEnumerable();
			if (minEnum.Any() && maxEnum.Any())
			{
				string min = minEnum.First().StringValue ?? "null";
				string max = maxEnum.First().StringValue ?? "null"; 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\telement");
            
            #line 59 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write(".Min = ");
            
            #line 59 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(min));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\telement");
            
            #line 60 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write(".Max = ");
            
            #line 60 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(max));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\t");
            
            #line 61 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
}
	}
	if (classOfElement(x.Name) == "Operation")
	{
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\telement");
            
            #line 66 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write(".Kind = \"");
            
            #line 66 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(kindOfOperation(x.Name)));
            
            #line default
            #line hidden
            this.Write("\";\r\n\t");
            
            #line 67 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\tIObservable<int> observable");
            
            #line 69 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write(" =\r\n\t\t\t\t\t\tSystem.Reactive.Linq.Observable.FromEventPattern<int>(\r\n\t\t\t\t\t\t\th => ele" +
                    "ment");
            
            #line 71 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write(".Event += h,\r\n\t\t\t\t\t\t\th => element");
            
            #line 72 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write(".Event -= h)\r\n\t\t\t\t\t\t\t.Select(e => e.EventArgs)\r\n\t\t\t\t\t\t\t.Synchronize().DistinctUnt" +
                    "ilChanged();\r\n\t\t\tIObserver<int> observer");
            
            #line 75 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write(" = Observer.Create<int>(x => element");
            
            #line 75 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write(".Action(x));\r\n\t\t\tISubject<int> reactElement");
            
            #line 76 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write(" = Subject.Create<int>(observer");
            
            #line 76 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write(", observable");
            
            #line 76 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index));
            
            #line default
            #line hidden
            this.Write(");\r\n\t    ");
            
            #line 77 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"

}
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 80 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"

//bool[,] sourceOrTarget = new bool[modelNodes.Count, 2];

foreach (var x in r.Model("GreenhouseTestModel").Edges) {
	if (classOfElement(x.To.Name) == "Operation") { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\telement");
            
            #line 86 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelNodes.IndexOf((Repo.INode)x.To)));
            
            #line default
            #line hidden
            this.Write(".IncomingValues.Add(");
            
            #line 86 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelNodes.IndexOf((Repo.INode)x.From)));
            
            #line default
            #line hidden
            this.Write(", null);\r\n\t");
            
            #line 87 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
 }
}

            
            #line default
            #line hidden
            this.Write("\r\n\t\t\t// index of the element and index of the reactElement which is made on it\'s " +
                    "basis are the same \r\n");
            
            #line 92 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"


int j = 0;
foreach (var x in r.Model("GreenhouseTestModel").Edges) 
{ 
	var source = x.From as Repo.INode;
	var target = x.To as Repo.INode; 
            
            #line default
            #line hidden
            this.Write("\t\t\tvar sub");
            
            #line 99 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(j));
            
            #line default
            #line hidden
            this.Write(" = reactElement");
            
            #line 99 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelNodes.IndexOf(source)));
            
            #line default
            #line hidden
            this.Write(".Subscribe(reactElement");
            
            #line 99 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelNodes.IndexOf(target)));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 100 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"

	j++;
} 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\tvar robot = new Model();\r\n\t\t\t");
            
            #line 105 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
 foreach (var x in modelNodes) { 
				if (classOfElement(x.Name) == "Sensor") { 
					var port = x.Attributes.Where(y => y.Name == "port").AsEnumerable();
					if (port.Any())
					{
						string p = port.First().StringValue; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\tvar s");
            
            #line 112 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelNodes.IndexOf(x)));
            
            #line default
            #line hidden
            this.Write(" = robot.AnalogSensors[Trik.Sensor.A");
            
            #line 112 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p));
            
            #line default
            #line hidden
            this.Write("].ToObservable().DistinctUntilChanged();\r\n\t\t\ts");
            
            #line 113 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelNodes.IndexOf(x)));
            
            #line default
            #line hidden
            this.Write(".Subscribe(reactElement");
            
            #line 113 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelNodes.IndexOf(x)));
            
            #line default
            #line hidden
            this.Write(");\r\n\t\t\t\t\t");
            
            #line 114 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
}
				}
				if (classOfElement(x.Name) == "Actuator") { 
					var port = x.Attributes.Where(y => y.Name == "port").AsEnumerable();
					if (port.Any())
					{
						string p = port.First().StringValue; 
            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\t\t\treactElement");
            
            #line 122 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelNodes.IndexOf(x)));
            
            #line default
            #line hidden
            this.Write(".Subscribe(robot.Motors[Trik.Motor.M");
            
            #line 122 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p));
            
            #line default
            #line hidden
            this.Write("]);\r\n\t\t\t\t\t");
            
            #line 123 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
}
				}
			}
            
            #line default
            #line hidden
            this.Write("\r\n            Console.ReadLine();\r\n\r\n\t\t\t//RobotSimulator();\r\n        }\r\n\t\t\r\n\t\tpri" +
                    "vate static void RobotSimulator()\r\n        {\r\n\t\t\t");
            
            #line 134 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
 foreach (var x in modelNodes) { 
				if (classOfElement(x.Name) == "Sensor") { 
            
            #line default
            #line hidden
            this.Write("\r\n\t\t\tSensorSim sensorSim");
            
            #line 137 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelNodes.IndexOf(x)));
            
            #line default
            #line hidden
            this.Write(" = new SensorSim();\r\n\t\t\tsensorSim");
            
            #line 138 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelNodes.IndexOf(x)));
            
            #line default
            #line hidden
            this.Write(".Index = ");
            
            #line 138 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelNodes.IndexOf(x)));
            
            #line default
            #line hidden
            this.Write(";\r\n\t\t\tsensorSim");
            
            #line 139 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelNodes.IndexOf(x)));
            
            #line default
            #line hidden
            this.Write(".NewSensorValue += (sender, args) => element");
            
            #line 139 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(modelNodes.IndexOf(x)));
            
            #line default
            #line hidden
            this.Write(".Action(args.SensorValue);\r\n\r\n\t\t\t\t");
            
            #line 141 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
}
			}
            
            #line default
            #line hidden
            this.Write("\r\n            Console.ReadLine();\r\n        }\r\n    }\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 149 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
 
string classOfElement(string name)
{
	switch(name)
	{
		case "aOpenWindow":
			return "Actuator";
		case "aCloseWindow":
			return "Actuator";
		case "aPourSoil":
			return "Actuator";
		case "aAirTemperature":
			return "Sensor";
		case "aSoilTemperature":
			return "Sensor";
		case "aInterval":
			return "Interval";
		case "aAndOperation":
			return "Operation";
		case "aOrOperation":
			return "Operation";
		default:
			return "Sensor";
	}
}

        
        #line default
        #line hidden
        
        #line 176 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"
 
string kindOfOperation(string name)
{
	switch(name)
	{
		case "aAndOperation":
			return "And";
		case "aOrOperation":
			return "Or";
		default:
			return "And";
	}
}

        
        #line default
        #line hidden
        
        #line 191 "C:\Users\User\Documents\GitHub\REAL.NET\src\Generator\Scenario.tt"

public Repo.IRepo r { get; set; }

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ScenarioBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
